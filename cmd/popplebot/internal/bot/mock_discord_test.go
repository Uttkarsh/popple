// Code generated by mockery v2.14.0. DO NOT EDIT.

package bot

import mock "github.com/stretchr/testify/mock"

// MockDiscord is an autogenerated mock type for the Discord type
type MockDiscord struct {
	mock.Mock
}

type MockDiscord_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDiscord) EXPECT() *MockDiscord_Expecter {
	return &MockDiscord_Expecter{mock: &_m.Mock}
}

// ReactToMessageWithEmoji provides a mock function with given fields: channelID, messageID, emojiID
func (_m *MockDiscord) ReactToMessageWithEmoji(channelID string, messageID string, emojiID string) error {
	ret := _m.Called(channelID, messageID, emojiID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(channelID, messageID, emojiID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscord_ReactToMessageWithEmoji_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReactToMessageWithEmoji'
type MockDiscord_ReactToMessageWithEmoji_Call struct {
	*mock.Call
}

// ReactToMessageWithEmoji is a helper method to define mock.On call
//  - channelID string
//  - messageID string
//  - emojiID string
func (_e *MockDiscord_Expecter) ReactToMessageWithEmoji(channelID interface{}, messageID interface{}, emojiID interface{}) *MockDiscord_ReactToMessageWithEmoji_Call {
	return &MockDiscord_ReactToMessageWithEmoji_Call{Call: _e.mock.On("ReactToMessageWithEmoji", channelID, messageID, emojiID)}
}

func (_c *MockDiscord_ReactToMessageWithEmoji_Call) Run(run func(channelID string, messageID string, emojiID string)) *MockDiscord_ReactToMessageWithEmoji_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDiscord_ReactToMessageWithEmoji_Call) Return(_a0 error) *MockDiscord_ReactToMessageWithEmoji_Call {
	_c.Call.Return(_a0)
	return _c
}

// SendMessageToChannel provides a mock function with given fields: channelID, msg
func (_m *MockDiscord) SendMessageToChannel(channelID string, msg string) error {
	ret := _m.Called(channelID, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(channelID, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscord_SendMessageToChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessageToChannel'
type MockDiscord_SendMessageToChannel_Call struct {
	*mock.Call
}

// SendMessageToChannel is a helper method to define mock.On call
//  - channelID string
//  - msg string
func (_e *MockDiscord_Expecter) SendMessageToChannel(channelID interface{}, msg interface{}) *MockDiscord_SendMessageToChannel_Call {
	return &MockDiscord_SendMessageToChannel_Call{Call: _e.mock.On("SendMessageToChannel", channelID, msg)}
}

func (_c *MockDiscord_SendMessageToChannel_Call) Run(run func(channelID string, msg string)) *MockDiscord_SendMessageToChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockDiscord_SendMessageToChannel_Call) Return(_a0 error) *MockDiscord_SendMessageToChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockDiscord interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDiscord creates a new instance of MockDiscord. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDiscord(t mockConstructorTestingTNewMockDiscord) *MockDiscord {
	mock := &MockDiscord{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
