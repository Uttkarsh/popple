// Code generated by mockery v2.14.0. DO NOT EDIT.

package bot

import (
	context "context"

	popple "github.com/connorkuehl/popple"
	mock "github.com/stretchr/testify/mock"
)

// MockPoppleClient is an autogenerated mock type for the PoppleClient type
type MockPoppleClient struct {
	mock.Mock
}

type MockPoppleClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPoppleClient) EXPECT() *MockPoppleClient_Expecter {
	return &MockPoppleClient_Expecter{mock: &_m.Mock}
}

// Board provides a mock function with given fields: ctx, serverID, ord, limit
func (_m *MockPoppleClient) Board(ctx context.Context, serverID string, ord popple.BoardOrder, limit uint) (popple.Board, error) {
	ret := _m.Called(ctx, serverID, ord, limit)

	var r0 popple.Board
	if rf, ok := ret.Get(0).(func(context.Context, string, popple.BoardOrder, uint) popple.Board); ok {
		r0 = rf(ctx, serverID, ord, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(popple.Board)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, popple.BoardOrder, uint) error); ok {
		r1 = rf(ctx, serverID, ord, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPoppleClient_Board_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Board'
type MockPoppleClient_Board_Call struct {
	*mock.Call
}

// Board is a helper method to define mock.On call
//  - ctx context.Context
//  - serverID string
//  - ord popple.BoardOrder
//  - limit uint
func (_e *MockPoppleClient_Expecter) Board(ctx interface{}, serverID interface{}, ord interface{}, limit interface{}) *MockPoppleClient_Board_Call {
	return &MockPoppleClient_Board_Call{Call: _e.mock.On("Board", ctx, serverID, ord, limit)}
}

func (_c *MockPoppleClient_Board_Call) Run(run func(ctx context.Context, serverID string, ord popple.BoardOrder, limit uint)) *MockPoppleClient_Board_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(popple.BoardOrder), args[3].(uint))
	})
	return _c
}

func (_c *MockPoppleClient_Board_Call) Return(_a0 popple.Board, _a1 error) *MockPoppleClient_Board_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ChangeKarma provides a mock function with given fields: ctx, serverID, increments
func (_m *MockPoppleClient) ChangeKarma(ctx context.Context, serverID string, increments popple.Increments) (popple.Increments, error) {
	ret := _m.Called(ctx, serverID, increments)

	var r0 popple.Increments
	if rf, ok := ret.Get(0).(func(context.Context, string, popple.Increments) popple.Increments); ok {
		r0 = rf(ctx, serverID, increments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(popple.Increments)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, popple.Increments) error); ok {
		r1 = rf(ctx, serverID, increments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPoppleClient_ChangeKarma_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeKarma'
type MockPoppleClient_ChangeKarma_Call struct {
	*mock.Call
}

// ChangeKarma is a helper method to define mock.On call
//  - ctx context.Context
//  - serverID string
//  - increments popple.Increments
func (_e *MockPoppleClient_Expecter) ChangeKarma(ctx interface{}, serverID interface{}, increments interface{}) *MockPoppleClient_ChangeKarma_Call {
	return &MockPoppleClient_ChangeKarma_Call{Call: _e.mock.On("ChangeKarma", ctx, serverID, increments)}
}

func (_c *MockPoppleClient_ChangeKarma_Call) Run(run func(ctx context.Context, serverID string, increments popple.Increments)) *MockPoppleClient_ChangeKarma_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(popple.Increments))
	})
	return _c
}

func (_c *MockPoppleClient_ChangeKarma_Call) Return(_a0 popple.Increments, _a1 error) *MockPoppleClient_ChangeKarma_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CheckKarma provides a mock function with given fields: ctx, serverID, who
func (_m *MockPoppleClient) CheckKarma(ctx context.Context, serverID string, who []string) (map[string]int64, error) {
	ret := _m.Called(ctx, serverID, who)

	var r0 map[string]int64
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) map[string]int64); ok {
		r0 = rf(ctx, serverID, who)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, serverID, who)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPoppleClient_CheckKarma_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckKarma'
type MockPoppleClient_CheckKarma_Call struct {
	*mock.Call
}

// CheckKarma is a helper method to define mock.On call
//  - ctx context.Context
//  - serverID string
//  - who []string
func (_e *MockPoppleClient_Expecter) CheckKarma(ctx interface{}, serverID interface{}, who interface{}) *MockPoppleClient_CheckKarma_Call {
	return &MockPoppleClient_CheckKarma_Call{Call: _e.mock.On("CheckKarma", ctx, serverID, who)}
}

func (_c *MockPoppleClient_CheckKarma_Call) Run(run func(ctx context.Context, serverID string, who []string)) *MockPoppleClient_CheckKarma_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockPoppleClient_CheckKarma_Call) Return(_a0 map[string]int64, _a1 error) *MockPoppleClient_CheckKarma_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Config provides a mock function with given fields: ctx, serverID
func (_m *MockPoppleClient) Config(ctx context.Context, serverID string) (*popple.Config, error) {
	ret := _m.Called(ctx, serverID)

	var r0 *popple.Config
	if rf, ok := ret.Get(0).(func(context.Context, string) *popple.Config); ok {
		r0 = rf(ctx, serverID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*popple.Config)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serverID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPoppleClient_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type MockPoppleClient_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
//  - ctx context.Context
//  - serverID string
func (_e *MockPoppleClient_Expecter) Config(ctx interface{}, serverID interface{}) *MockPoppleClient_Config_Call {
	return &MockPoppleClient_Config_Call{Call: _e.mock.On("Config", ctx, serverID)}
}

func (_c *MockPoppleClient_Config_Call) Run(run func(ctx context.Context, serverID string)) *MockPoppleClient_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPoppleClient_Config_Call) Return(_a0 *popple.Config, _a1 error) *MockPoppleClient_Config_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutConfig provides a mock function with given fields: ctx, config
func (_m *MockPoppleClient) PutConfig(ctx context.Context, config *popple.Config) error {
	ret := _m.Called(ctx, config)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *popple.Config) error); ok {
		r0 = rf(ctx, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPoppleClient_PutConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutConfig'
type MockPoppleClient_PutConfig_Call struct {
	*mock.Call
}

// PutConfig is a helper method to define mock.On call
//  - ctx context.Context
//  - config *popple.Config
func (_e *MockPoppleClient_Expecter) PutConfig(ctx interface{}, config interface{}) *MockPoppleClient_PutConfig_Call {
	return &MockPoppleClient_PutConfig_Call{Call: _e.mock.On("PutConfig", ctx, config)}
}

func (_c *MockPoppleClient_PutConfig_Call) Run(run func(ctx context.Context, config *popple.Config)) *MockPoppleClient_PutConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*popple.Config))
	})
	return _c
}

func (_c *MockPoppleClient_PutConfig_Call) Return(_a0 error) *MockPoppleClient_PutConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockPoppleClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPoppleClient creates a new instance of MockPoppleClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPoppleClient(t mockConstructorTestingTNewMockPoppleClient) *MockPoppleClient {
	mock := &MockPoppleClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
